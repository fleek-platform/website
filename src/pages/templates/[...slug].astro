---
import settings from '@base/settings.json';
import templates from '@base/templates.json';
import BaseHtml from '@layouts/BaseHtml.astro';
import Templates, { type Template } from '@components/Templates';

export async function getStaticPaths() {
  const templatesArray: Template[] = Object.values(templates) as Template[];
  return templatesArray.map((template) => ({
    params: { slug: template.slug },
    props: { template: { ...template } },
  }));
}

const { template } = Astro.props;
const { name, description, banner, slug, screenshots, fleekDeploymentUrl } =
  template;

// Function to fetch and decode README content
async function fetchReadmeContent(repoOwner: string, repoSlug: string) {
  const url = `https://api.github.com/repos/${repoOwner}/${repoSlug}/readme`;
  const headers = {
    'User-Agent': 'octokit.js/2.1.0 octokit-core.js/4.2.4 Mozilla/5.0',
    Accept: 'application/vnd.github.v3+json',
  };

  const response = await fetch(url, { headers });
  if (!response.ok) {
    console.error(`HTTP error! status: ${response.status}`);
    return '';
  }
  const data = await response.json();
  const decodedContent = Buffer.from(data.content, 'base64').toString('utf-8');
  return decodedContent;
}

const similarTemplates = (Object.values(templates) as Template[]).filter((el) =>
  template.similarTemplateIds.includes(el.slug),
);

// Fetch README content during build
const readmeContent = await fetchReadmeContent(
  template.repository.owner ?? '',
  template.repository.slug ?? '',
);
---

<BaseHtml
  title={name}
  ogMeta={{
    title: name,
    description,
    image: banner,
    slug: `templates/${slug}`,
  }}
  customContentWrapperClass="px-32 xl:px-0"
>
  <main class="container flex flex-col gap-20 sm:flex-row sm:flex-wrap">
    <div class="flex-1">
      <Templates.TemplateDetails.TopActions
        templateDeploymentUrl={fleekDeploymentUrl}
      />
      <Templates.TemplateDetails.TemplateHero template={template} />
    </div>

    <div class="flex max-w-full flex-col gap-20 overflow-hidden sm:flex-row">
      <div
        class="flex min-w-0 flex-1 flex-col gap-20 sm:flex-shrink sm:flex-grow"
      >
        {
          readmeContent && (
            <Templates.TemplateDetails.TemplateReadme
              readmeContent={readmeContent}
            />
          )
        }
        {
          screenshots.length > 0 && (
            <Templates.TemplateDetails.TemplateScreenshot
              screenShotUrl={screenshots[0]}
            />
          )
        }
      </div>

      <div class="flex-none sm:max-w-[242px]">
        <Templates.TemplateDetails.TemplateSpecs template={template} />
      </div>
    </div>

    <div class="flex-1">
      <div class="separator my-60 border-b-1 border-b-neutral-8"></div>
      <Templates.TemplateDetails.SimilarTemplates
        templates={similarTemplates}
      />
    </div>
  </main>
</BaseHtml>
