---
interface OpenAPIInfo {
  title: string;
  description: string;
}

interface OpenAPIParameter {
  name: string;
  in: string;
  description: string;
  required: boolean;
  schema?: any;
  example?: any;
}

interface OpenAPIExample {
  summary: string;
  value: any;
}

interface OpenAPIContent {
  schema?: any;
  examples?: Record<string, OpenAPIExample>;
}

interface OpenAPIResponse {
  description: string;
  content?: Record<string, OpenAPIContent>;
}

interface OpenAPIRequestBody {
  required?: boolean;
  content?: Record<string, OpenAPIContent>;
}

interface OpenAPIMethod {
  summary: string;
  description: string;
  parameters?: OpenAPIParameter[];
  requestBody?: OpenAPIRequestBody;
  responses: Record<string, OpenAPIResponse>;
}

interface OpenAPIData {
  openapi: string;
  info: OpenAPIInfo;
  paths: Record<string, Record<string, OpenAPIMethod>>;
  components: any;
  tags: Array<{ name: string }>;
}

// Fetch the OpenAPI spec at build time
let apiData: OpenAPIData | null = null;
let error: string | null = null;

try {
  const response = await fetch(import.meta.env.PUBLIC_OPEN_API_ENDPOINT);
  if (!response.ok) {
    throw new Error(
      `Failed to fetch API spec: ${response.status} ${response.statusText}`,
    );
  }

  const fullData = await response.json();

  const aiAgentsPaths: Record<string, Record<string, OpenAPIMethod>> = {};

  for (const [path, methods] of Object.entries(fullData.paths)) {
    if (path.includes('ai-agents')) {
      aiAgentsPaths[path] = methods as Record<string, OpenAPIMethod>;
    }
  }

  apiData = {
    openapi: fullData.openapi,
    info: fullData.info,
    paths: aiAgentsPaths,
    components: fullData.components,
    tags: fullData.tags.filter(
      (tag: { name: string }) => tag.name === 'AI Agents',
    ),
  };
} catch (err) {
  console.error('Error fetching or parsing OpenAPI spec:', err);
  error = 'Failed to load API documentation. Please try again later.';
}

function getMethodColor(method: string): string {
  switch (method.toLowerCase()) {
    case 'get':
      return 'bg-blue-500';
    case 'post':
      return 'bg-green-500';
    case 'put':
      return 'bg-yellow-dark-8';
    case 'delete':
      return 'bg-red-dark-8';
    default:
      return 'bg-gray-500';
  }
}

function formatJSON(obj: any): string {
  return JSON.stringify(obj, null, 2);
}
---

{
  error ? (
    <div class="text-red-500 text-center">{error}</div>
  ) : apiData ? (
    <div>
      <div class="space-y-8">
        {Object.entries(apiData.paths).map(([path, methods]) => (
          <div class="rounded-lg p-4 shadow-sm">
            <h2 class="text-lg mb-2 font-semibold">{path}</h2>

            <div class="space-y-4">
              {Object.entries(methods).map(([method, details]) => (
                <div class="border-t pt-4">
                  <div class="mb-2 mt-4 flex items-center gap-2">
                    <span
                      class={`${getMethodColor(method)} rounded text-sm px-2 py-1 font-bold uppercase text-white`}
                    >
                      {method}
                    </span>
                    <span class="font-medium">{details.summary}</span>
                  </div>

                  <div class="text-sm mb-3 whitespace-pre-line">
                    {details.description}
                  </div>

                  {details.parameters && details.parameters.length > 0 && (
                    <div class="mb-3">
                      <h3 class="text-sm mb-1 font-semibold">Parameters:</h3>
                      <ul class="text-sm list-disc pl-5">
                        {details.parameters.map((param) => (
                          <li>
                            <span class="font-medium">{param.name}</span>
                            {param.required && (
                              <span class="text-red-500">*</span>
                            )}
                            <span> ({param.in}) - </span>
                            <span class="">{param.description}</span>
                            {param.example && (
                              <div class="ml-2 mt-1">
                                <span class="text-xs font-medium">
                                  Example:{' '}
                                </span>
                                <code class="py-0.5 rounded text-xs bg-gray-100 px-1">
                                  {param.example.toString()}
                                </code>
                              </div>
                            )}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {details.requestBody && (
                    <div class="mb-3">
                      <h3 class="text-sm mb-1 font-semibold">Request Body:</h3>
                      <div class="text-sm">
                        {details.requestBody.required && (
                          <span class="text-red-500">Required. </span>
                        )}
                        {details.requestBody.content &&
                          Object.entries(details.requestBody.content).map(
                            ([contentType, content]) => (
                              <div>
                                <div class="ml-2">
                                  <span class="font-mono text-xs">
                                    {contentType}
                                  </span>
                                </div>

                                {/* Request Body Examples */}
                                {content.examples &&
                                  Object.keys(content.examples).length > 0 && (
                                    <div class="mt-2">
                                      <div class="text-xs mb-1 font-medium">
                                        Examples:
                                      </div>
                                      <div class="space-y-2">
                                        {Object.entries(content.examples).map(
                                          ([exampleName, example]) => (
                                            <details class="ml-4">
                                              <summary class="text-xs cursor-pointer font-medium text-yellow">
                                                {example.summary || exampleName}
                                              </summary>
                                              <code class="rounded text-xs overflow-auto p-2">
                                                {formatJSON(example.value)}
                                              </code>
                                            </details>
                                          ),
                                        )}
                                      </div>
                                    </div>
                                  )}
                              </div>
                            ),
                          )}
                      </div>
                    </div>
                  )}

                  <div>
                    <h3 class="text-sm mb-1 font-semibold">Responses:</h3>
                    <div class="text-sm grid grid-cols-1 gap-2 md:grid-cols-2 lg:grid-cols-3">
                      {Object.entries(details.responses).map(
                        ([status, response]) => (
                          <div class="rounded p-2">
                            <div class="font-medium">Status: {status}</div>
                            <div class="text-xs text-gray-600">
                              {response.description}
                            </div>

                            {/* Response Examples */}
                            {response.content &&
                              Object.entries(response.content).map(
                                ([contentType, content]) => (
                                  <div class="mt-2">
                                    <div class="text-xs font-mono">
                                      {contentType}
                                    </div>

                                    {content.examples &&
                                      Object.keys(content.examples).length >
                                        0 && (
                                        <div class="mt-1">
                                          <details>
                                            <summary class="text-xs cursor-pointer font-medium text-yellow">
                                              View Example
                                            </summary>
                                            <div class="mt-1 space-y-2">
                                              {Object.entries(
                                                content.examples,
                                              ).map(
                                                ([exampleName, example]) => (
                                                  <div>
                                                    {example.summary && (
                                                      <div class="text-xs font-medium">
                                                        {example.summary}
                                                      </div>
                                                    )}
                                                    <code>
                                                      {formatJSON(
                                                        example.value,
                                                      )}
                                                    </code>
                                                  </div>
                                                ),
                                              )}
                                            </div>
                                          </details>
                                        </div>
                                      )}
                                  </div>
                                ),
                              )}
                          </div>
                        ),
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  ) : (
    <div class="p-4 text-center">Loading API documentation...</div>
  )
}
