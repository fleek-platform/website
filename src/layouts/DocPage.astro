---
import '@styles/globals.css';
import '@styles/docPage.css';
import '@styles/admonition.css';
import InjectCodeCopy from '@components/InjectCodeCopy.astro';

import { generateSidebarDSByUserOrder } from '@utils/generateSidebarDS';
import settings from '@base/settings.json';

import Sidebar from '@components/Sidebar';
import SearchBtn from '@components/SearchBtn';
import DocItemLink from '@components/DocItemLink';

import OnPageNavigation from '@components/OnPageNavigation/OnPageNavigation.astro';
import { getEntry } from 'astro:content';
import GithubEditLink from '@components/GitHubEditLink.astro';
import { generateGitHubEditLink } from '@utils/url';

import type { MarkdownHeading } from 'astro';
import type { ContentEntryMap } from 'astro:content';
import type { DocsLink } from '@base/pages/docs/[...slug].astro';
import { getCollection } from 'astro:content';
import { generateFullSlug } from '@utils/generateFullSlug';
import DocsHtml from './DocsHtml.astro';
import { Announcement } from '@components/Announcement';

type Props = {
  title: string;
  description: string;
  pageSlug: string;
  headings: MarkdownHeading[];
  prevItem: DocsLink | null;
  nextItem: DocsLink | null;
};

const { title, description, headings, prevItem, nextItem, pageSlug } =
  Astro.props;

const {
  collection,
  id,
}: {
  collection: keyof ContentEntryMap;
  id: string;
} = (() => {
  let entries = Astro.url.pathname.split('/').filter(Boolean);

  if (!Array.isArray(entries)) {
    throw new Error('Expected an array');
  }

  if (entries.length < 2) {
    entries.push('index');
  }

  return {
    collection: entries[0] as keyof ContentEntryMap,
    id: entries.slice(1).join('/'),
  };
})();

const data = await getEntry(collection, id);

if (!data || !data?.id || !data?.collection) {
  throw Error('Oops! Unexpected response data');
}

const githubEditUrlPathname = generateGitHubEditLink({
  collection: data.collection,
  id: data.id,
});

const allPosts = await getCollection('docs');
const orderBy = settings.docs.menu.order;
const sidebarSorted = generateSidebarDSByUserOrder(allPosts, orderBy);

const indexNameDocs = import.meta.env.PUBLIC_MEILISEARCH_INDEX_DOCS;

// TODO: Fails after prod build
const isHome = Astro.url.pathname === '/docs';

const isDocsHomepage = data.slug === 'index' && pageSlug === 'index';

const slug = generateFullSlug({
  basePath: settings.site.metadata.docs.slug,
  slug: isDocsHomepage ? '' : pageSlug,
});

const image = settings.site.metadata.docs.image;
---

<DocsHtml
  title={title}
  ogMeta={{
    title,
    description,
    image,
    slug,
  }}
>
  <main class="relative flex flex-col gap-48 md:flex-row">
    <aside data-name="doc-sidebar">
      <Sidebar
        client:load
        data={sidebarSorted}
        pathname={Astro.url.pathname}
        indexNameDocs={indexNameDocs}
      />
    </aside>
    <article class="doc w-full min-w-0 flex-1 pb-64">
      <slot />
      <div class="mt-12 flex flex-row gap-20">
        {prevItem && <DocItemLink docItem={prevItem} />}
        {nextItem && <DocItemLink docItem={nextItem} isNext />}
      </div>
      <GithubEditLink pathname={githubEditUrlPathname} />
    </article>
    <div class="relative">
      <aside
        class="sticky top-[92px] hidden h-full max-h-[calc(100vh-96px)] w-208 shrink-0 flex-col justify-between gap-24 overflow-auto pb-14 md:flex"
      >
        {headings && <OnPageNavigation headings={headings} />}
        <Announcement variant="docs" />
      </aside>
    </div>
  </main>
</DocsHtml>
<InjectCodeCopy />
